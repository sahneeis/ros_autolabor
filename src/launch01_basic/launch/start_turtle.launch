<!-- <launch deprecated="outdated version"> -->
<launch>
    <!--启动的节点和键盘控制节点-->
    <!--args="xxx xxx xxx" (可选)

    将参数传递给节点

    machine="机器名"

    在指定机器上启动节点

    respawn="true | false" (可选)

    如果节点退出，是否自动重启

    respawn_delay=" N" (可选)

    如果 respawn 为 true, 那么延迟 N 秒后启动节点

    required="true | false" (可选)

    该节点是否必须，如果为 true,那么如果该节点退出，将杀死整个 roslaunch

    ns="xxx" (可选)

    在指定命名空间 xxx 中启动节点

    clear_params="true | false" (可选)

    在启动前，删除节点的私有空间的所有参数

    output="log | screen" (可选)

    日志发送目标，可以设置为 log 日志文件，或 screen 屏幕,默认是 log-->
    <!--param使用，向参数服务器设置参数。格式1：launch下，node外-->
    <param name="param_A" type="int" value="100"/>
    <!--rosparam的使用.格式1:launch下,node外-->
    <rosparam command="load" file="$(find launch01_basic)/launch/ros_params.yaml"/>
    <rosparam command="dump" file="$(find launch01_basic)/launch/ros_params_out.yaml"/>
    <rosparam command="delete" param="bg_B"/>


    <node pkg="turtlesim" type="turtlesim_node"     name="myTurtle" output="screen"  respawn="true"/>
    <!--param使用，向参数服务器设置参数。格式2：node内,参数名前有这个节点的对应名字,专属于这个节点空间的参数-->
        <param name="param_b" type="double" value="3.14"/>
    <!--rosparam的使用.格式1:launch下,node外-->
        <rosparam command="load" file="$(find launch01_basic)/launch/ros_params.yaml"/>
        
    <node pkg="turtlesim" type="turtle_teleop_key"  name="myTurtleContro" output="screen" />

    <!--remap就是对这个节点的topic进行改变，比如说原本这个乌龟的控制个话题是/turtle1/cmd_vel,可以改称teleop twist控制节点的控制话题：/cmd_vel-->
</launch>